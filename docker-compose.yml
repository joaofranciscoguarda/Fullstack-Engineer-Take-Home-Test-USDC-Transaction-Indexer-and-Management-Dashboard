services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: indexer-postgres
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U template_user -d template_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching & Queue
  redis:
    image: redis:7-alpine
    container_name: indexer-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend - NestJS (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development # Use development stage by default
    container_name: indexer-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9229:9229" # Debug port
    env_file:
      - ./backend/.env
    environment:
      # Graceful shutdown timeout (30 seconds)
      - SHUTDOWN_TIMEOUT=30000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      # Volume mounts for development hot-reload
      - ./backend/src:/app/src
    # Graceful shutdown configuration
    stop_signal: SIGTERM
    stop_grace_period: 35s # Give 5s more than SHUTDOWN_TIMEOUT

  # Frontend - Next.js (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development # Use development stage by default
    container_name: indexer-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - ./backend/.env
    depends_on:
      - backend
    networks:
      - app-network
    volumes:
      # Volume mounts for development hot-reload
      - ./frontend/src:/app/src

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
